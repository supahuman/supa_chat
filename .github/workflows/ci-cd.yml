name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Lint and test both applications
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [bot, chat-widget]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd ${{ matrix.app }}
          pnpm install --frozen-lockfile

      - name: Lint
        run: |
          cd ${{ matrix.app }}
          pnpm run lint || echo "No lint script found"

      - name: Type check
        run: |
          cd ${{ matrix.app }}
          pnpm run type-check || echo "No type-check script found"

  # Build both applications
  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        app: [bot, chat-widget]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd ${{ matrix.app }}
          pnpm install --frozen-lockfile

      - name: Build
        run: |
          cd ${{ matrix.app }}
          pnpm run build || echo "No build script found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: ${{ matrix.app }}/dist
          if-no-files-found: ignore

  # Deploy to staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: bot-build
          path: bot/dist

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: chat-widget-build
          path: chat-widget/dist

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Examples:
          # - Deploy to Vercel: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          # - Deploy to Railway: railway deploy
          # - Deploy to your own server: rsync, scp, etc.

  # Deploy to production (on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: bot-build
          path: bot/dist

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: chat-widget-build
          path: chat-widget/dist

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Examples:
          # - Deploy to Vercel: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          # - Deploy to Railway: railway deploy
          # - Deploy to your own server: rsync, scp, etc.

  # Security scan
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
